import { IncomingMessage, ServerResponse } from "node:http";

//#region src/options.d.ts
type MiddlewareOptions = {
  allowedHosts: readonly string[];
  /**
   * Customize the error message sent when a host is not allowed.
   *
   * @param hostname - The hostname that was not allowed.
   */
  generateErrorMessage?(hostname: string): string;
  /**
   * Content-Type for the error response.
   *
   * @default 'text/plain'
   */
  errorResponseContentType?: string;
}; //#endregion
//#region src/isHostAllowed.d.ts

/**
 * Check if the host contained in the host header is allowed.
 *
 * This function will cache the result if the `allowedHosts` array is frozen.
 *
 * @param hostHeader - The value of host header. See [RFC 9110 7.2](https://datatracker.ietf.org/doc/html/rfc9110#name-host-and-authority).
 * @param allowedHosts - The allowed host patterns. See the README for more details.
 */
declare function isHostAllowed(hostHeader: string | undefined, allowedHosts: readonly string[]): boolean;

//#endregion
//#region src/middleware.d.ts
/**
 * Middleware to validate the host header of incoming requests.
 *
 * If the host header is not in the allowed hosts list, a 403 Forbidden response
 * is sent.
 */
declare function hostValidationMiddleware(options: MiddlewareOptions): (req: IncomingMessage, res: ServerResponse, next: (err?: unknown) => void) => Promise<void>;

//#endregion
export { MiddlewareOptions, hostValidationMiddleware, isHostAllowed };
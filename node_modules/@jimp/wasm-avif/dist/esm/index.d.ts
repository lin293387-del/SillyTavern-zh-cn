import z from "zod";
declare const AvifOptionsSchema: z.ZodObject<{
    colorSpace: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"display-p3">, z.ZodLiteral<"srgb">]>>;
    chromaDeltaQ: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    cqAlphaLevel: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    cqLevel: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    denoiseLevel: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    sharpness: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    speed: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    subsample: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    tileColsLog2: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    tileRowsLog2: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    tune: z.ZodDefault<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"psnr">, z.ZodLiteral<"ssim">, z.ZodLiteral<"auto">]>>>;
}, "strip", z.ZodTypeAny, {
    chromaDeltaQ: boolean;
    cqAlphaLevel: number;
    cqLevel: number;
    denoiseLevel: number;
    sharpness: number;
    speed: number;
    subsample: number;
    tileColsLog2: number;
    tileRowsLog2: number;
    tune: "psnr" | "ssim" | "auto";
    colorSpace?: "display-p3" | "srgb" | undefined;
}, {
    colorSpace?: "display-p3" | "srgb" | undefined;
    chromaDeltaQ?: boolean | undefined;
    cqAlphaLevel?: number | undefined;
    cqLevel?: number | undefined;
    denoiseLevel?: number | undefined;
    sharpness?: number | undefined;
    speed?: number | undefined;
    subsample?: number | undefined;
    tileColsLog2?: number | undefined;
    tileRowsLog2?: number | undefined;
    tune?: "psnr" | "ssim" | "auto" | undefined;
}>;
type AvifOptions = z.infer<typeof AvifOptionsSchema>;
export default function avif(): {
    mime: "image/avif";
    hasAlpha: true;
    encode: (bitmap: import("@jimp/types").Bitmap, options?: Partial<AvifOptions>) => Promise<Buffer>;
    decode: (data: Buffer) => Promise<{
        data: Buffer;
        width: number;
        height: number;
    }>;
};
export {};
//# sourceMappingURL=index.d.ts.map